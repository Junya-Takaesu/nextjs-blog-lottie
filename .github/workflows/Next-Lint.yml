name: Next Lint

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - "**.ts"
      - "**.tsx"
      - "**.js"
      - "**.jsx"
      - "package.json"
      - "yarn.lock"

    branches: [main, develop]

permissions:
  pull-requests: write
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        id: eslint
        run: |
          set +e

          npx next lint --format json --output-file lint_output.json
          LINT_EXIT_CODE=$?

          echo "LINT_EXIT_CODE=${LINT_EXIT_CODE}" >> $GITHUB_ENV

          if [ -s lint_output.json ]; then
            # Áµ±Ë®àÊÉÖÂ†±„ÇíÈõÜË®à
            STATS=$(jq -r '
              reduce .[] as $file (
                {"error": 0, "warning": 0};
                .error += $file.errorCount |
                .warning += $file.warningCount
              )
            ' lint_output.json)

            # „Ç®„É©„ÉºË©≥Á¥∞„ÇíÊäΩÂá∫
            ERROR_LIST=$(jq -r '
              map(select(.errorCount > 0))
              | map(
                ["#### " + .filePath,
                 ""]
                + (.messages | map(
                  select(.severity == 2)
                  | "- Line " + (.line|tostring) + ": " + .message
                ))
              )
              | .[]
              | join("\n")
            ' lint_output.json)

            # HTMLÊßãÈÄ†„Çí heredoc „ÅßÊßãÁØâ
            if [ -n "$ERROR_LIST" ]; then
              ERROR_DETAILS=$(cat <<EOF
              <details>
              <summary>Show Detailed Errors</summary>

              ### Detailed Errors:

              $ERROR_LIST

              </details>
              EOF
              )
            else
              ERROR_DETAILS=""
            fi

            echo "ERROR_DETAILS<<EOF" >> $GITHUB_ENV
            echo "$ERROR_DETAILS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            echo "TOTAL_ERRORS=$(echo $STATS | jq -r '.error')" >> $GITHUB_ENV
            echo "TOTAL_WARNINGS=$(echo $STATS | jq -r '.warning')" >> $GITHUB_ENV
          else
            echo "TOTAL_ERRORS=0" >> $GITHUB_ENV
            echo "TOTAL_WARNINGS=0" >> $GITHUB_ENV
          fi

          exit $LINT_EXIT_CODE

      - name: Comment PR
        if: always()
        run: |
          ERRORS=${TOTAL_ERRORS:-0}
          WARNINGS=${TOTAL_WARNINGS:-0}
          TOTAL=$((ERRORS + WARNINGS))

          if [ $TOTAL -eq 0 ]; then
            STATUS="‚úÖ All Clear"
            SUMMARY="‚ú® Excellent! No linting issues found."
          else
            if [ $ERRORS -gt 0 ]; then
              STATUS="‚ùå Failed"
            else
              STATUS="‚ö†Ô∏è Passed with warnings"
            fi
            SUMMARY="üìä Summary:
            - üî¥ Errors: $ERRORS
            - ‚ö†Ô∏è Warnings: $WARNINGS
            - üìù Total Issues: $TOTAL"
          fi

          CURRENT_TIME=$(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M:%S')

          # „Ç®„É©„ÉºË©≥Á¥∞„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøËøΩÂä†
          if [ -n "${ERROR_DETAILS:-}" ]; then
            ERROR_SECTION="$ERROR_DETAILS"
          else
            ERROR_SECTION=""
          fi

          BODY=$(cat <<EOF
          ## ESLint Check Results

          ### Status: $STATUS

          $SUMMARY

          $ERROR_SECTION

          [View detailed log](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})

          *Executed at: $CURRENT_TIME*
          EOF
          )

          gh pr comment ${{ github.event.pull_request.number }} --body "$BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
